#!/bin/bash

. /etc/rc.conf
. /etc/rc.d/functions
. /etc/conf.d/vbox

BINARY="$INSTALL_DIR/vboxwebsrv"
PID=$(pidof -o %PPID $BINARY)

start() {
  stat_busy "Starting VirtualBox Web Service";
  if [[ ! -n "$PID" ]]; then
      [[ -n "$VBOXWEB_USER" ]] || stat_die
      lsmod | grep -q "vboxdrv[^_-]" || stat_die
      PARAMS="--background"
      [[ -n "$VBOXWEB_HOST" ]]           && PARAMS="$PARAMS -H $VBOXWEB_HOST"
      [[ -n "$VBOXWEB_PORT" ]]           && PARAMS="$PARAMS -p $VBOXWEB_PORT"
      [[ -n "$VBOXWEB_TIMEOUT" ]]        && PARAMS="$PARAMS -t $VBOXWEB_TIMEOUT"
      [[ -n "$VBOXWEB_CHECK_INTERVAL" ]] && PARAMS="$PARAMS -i $VBOXWEB_CHECK_INTERVAL"
      [[ -n "$VBOXWEB_THREADS" ]]        && PARAMS="$PARAMS -T $VBOXWEB_THREADS"
      [[ -n "$VBOXWEB_KEEPALIVE" ]]      && PARAMS="$PARAMS -k $VBOXWEB_KEEPALIVE"
      [[ -n "$VBOXWEB_LOGFILE" ]]        && PARAMS="$PARAMS -F $VBOXWEB_LOGFILE"
      # prevent inheriting this setting to VBoxSVC
      unset VBOX_RELEASE_LOG_DEST
      su - $VBOXWEB_USER -c "$BINARY $PARAMS" &>/dev/null
      # ugly: wait until the final process has forked
      sleep .2
      PID=$(pidof -o %PPID $BINARY)
      if [ -n "$PID" ]; then
          add_daemon vboxweb
          stat_done
      else
          stat_die
      fi
  else
    stat_die
  fi
}

stop() {
  stat_busy "Stopping VirtualBox Web Service"
  if [[ -n $PID ]]; then
    kill $PID
    if [[ $? -eq 0 ]]; then 
      rm_daemon vboxweb
      stat_done
    else
      stat_die
    fi
  else
      stat_die
  fi
}

restart() {
  stop && start
}

status() {
  stat_busy "Checking for VirtualBox Web Service"
  if [[ -n $PID ]]; then
      stat_done
  else
      stat_fail
      false
  fi
}

case "$1" in
start)
    start
    ;;
stop)
    stop
    ;;
restart)
    restart
    ;;
force-reload)
    restart
    ;;
status)
    status
    ;;
*)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

# vim:set ts=2 sw=2 ft=sh et:
